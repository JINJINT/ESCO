#===============================================#
#           simulating one cell group           # 
#===============================================#
setwd("/Users/jinjin/Desktop/GCN_singlecell/simulators/splattermodify/")
devtools::load_all()

#library(splattermodify)
#===== simulating one cell group with no gene-gene correlation

# single trial
sim<-splatSimulateSingle(nGenes = 50, batchCells = 20, 
                         trials = 1)
# multiple trial with one common true
sim<-splatSimulateSingle(nGenes = 50, batchCells = 20, 
                         trials = 2, dirname = "/Users/jinjin/Desktop/")

# multiple configurations with one common mean
sim<-splatSimulateSingle(nGenes = 50, batchCells = 20, 
                         alpha_mean = c(0.4, 0.1), trials = 1,
                         dirname = "/Users/jinjin/Desktop/")
# multiple configurations with one common mean
sim<-splatSimulateSingle(nGenes = 50, batchCells = 20, 
                         alpha_mean = c(0.4, 0.1), trials = 2, 
                         dirname = "/Users/jinjin/Desktop/")


#===== simulating one cell group with no gene-gene correlation

# simulating one cell group with randomized gene-gene correlation
sim <- splatSimulateSingle(nGenes = 500, batchCells = 200, 
                         alpha_mean = c(0.1), 
                         trials = 1, withcorr = TRUE, 
                         dirname = "/Users/jinjin/Desktop/")

# simulating one cell group with given gene-gene correlation
sim<-splatSimulateSingle(nGenes = 50, batchCells = 20, 
                         alpha_mean = c(0.4, 0.1), trials = 2, withcorr = TRUE, corr = list(diag(1,50)), dirname = "/Users/jinjin/Desktop/")

# simulating one cell group from real data
data(zeisel)
counts = zeisel[sample(1:nrow(zeisel), 200), sample(1:ncol(zeisel), 100)]
params <- splatEstimate(counts, dirname = "/Users/jinjin/Desktop/result")
sim<-splatSimulateSingle(params, nGenes = 50, batchCells = 20, 
                         alpha_mean = c(0.4, 0.1), trials = 2, withcorr = TRUE, corr = list(diag(1,50)), dirname = "/Users/jinjin/Desktop/")


#==============================================#
#   simulating discrete multiple cell groups   # 
#==============================================#

# simulating mutiple cell group with no gene-gene correlation
sim<-splatSimulateGroups(nGenes = 100, batchCells = 50, 
                         group.prob = c(0.3, 0.7), deall.prob = 0.2, de.prob = c(0.5, 0.5),
                         dropout.mid = 2, alpha_mean = 0.4, trials = 1)


# simulating mutiple cell group with randomized gene-gene correlation
sim<-splatSimulateGroups(nGenes = 100, batchCells = 50, 
                         group.prob = c(0.5, 0.5), deall.prob = 0.3, house.prob = 0.05, de.prob = c(0.3, 0.7),
                         de.facLoc = c(2, 1), 
                         withcorr = TRUE,
                         dropout.mid = 2, alpha_mean = 0.4, trials = 1)




# simulating mutiple cell group with given gene-gene correlation
sim<-splatSimulateGroups(nGenes = 100, batchCells = 50, 
                         group.prob = c(0.3, 0.7), deall.prob = 0.2, de.prob = c(0.5, 0.5),
                         withcorr = TRUE,
                         corr = list(diag(10), diag(10), diag(10)),
                         dropout.mid = 2, alpha_mean = 0.4, trials = 1)



# =========simulating mutiple cell group from real data

data(zeisel_subnorm) #zeisel_subnorm
data(cellinfo) #cellinfo
data(geneinfo) #geneinfo
cells = colnames(zeisel_subnorm)
subcellinfo = droplevels(cellinfo$newcelltype[match(cells, cellinfo$cell)])
subcellinfo = data.frame(cell = cells, newcelltype = subcellinfo)
# cells  = as.character(subcellinfo$cell[which(subcellinfo$newcelltype!="microglia")])
# zeisel_sub = zeisel_sub[,cells]
# subcellinfo = droplevels(subcellinfo$newcelltype[match(cells, subcellinfo$cell)])
# subcellinfo = data.frame(cell = cells, newcelltype = subcellinfo)
for(i in 1:3){
   subcells = as.character(subcellinfo$cell[which(subcellinfo$newcelltype==levels(subcellinfo$newcelltype)[i])])
   zeisel_subnorm[,subcells] = mean(colSums(zeisel_subnorm))/mean(colSums(zeisel_subnorm[,subcells]))*zeisel_subnorm[,subcells]
 }

devtools::load_all()


        

#zeisel_sub = zeisel_sub[which(subgeneinfo$newcelltype%in%c()),]

#genes  = subgeneinfo$genes[which(subgeneinfo$newcelltype!="")]
#de.facLoc = getParam(params, "de.facLoc")
#params<-setParams(params, de.facLoc = 0.3*de.facLoc)

params <- splatEstimate(zeisel_subnorm, dirname = "/Users/jinjin/Desktop/result/", 
                        cellinfo = subcellinfo$newcelltype, group = TRUE)


simreal <- splatSimulateGroups(params = params, trials = 1)

paramsgeo <- splatgeoEstimate(zeisel_subnorm, dirname = "/Users/jinjin/Desktop/result/", 
                        cellinfo = subcellinfo$newcelltype, group = TRUE)

simgeo <- splatgeoSimulateGroups(params = paramsgeo, trials = 1)

paramshomo <- splatEstimate(zeisel_subnorm, dirname = "/Users/jinjin/Desktop/result/homo")

simhomo<-splatSimulateSingle(paramshomo, trials = 1)

plotdir = "/Users/jinjin/Desktop/result/"

config = umap.defaults
config$n_neighbors = 30
config$min_dist = 0.1
umapplot(assays(simreal)$TrueCounts, 
         celltype = colData(simreal)$Group, 
         labels = levels(subcellinfo$newcelltype), 
         config = config)
umapplot(zeisel_subnorm, 
         celltype = subcellinfo$newcelltype, 
         labels = levels(subcellinfo$newcelltype), 
         config = config)

umapplot(t(assays(simreal)$TrueCounts[simdegenes,]), 
         celltype = simdegeneinfo$newcelltype, 
         labels = levels(degeneinfo$newcelltype), 
         config = config)

umapplot(t(zeisel_subnorm[degenes,]), 
         celltype = degeneinfo$newcelltype, 
         labels = levels(degeneinfo$newcelltype), 
         config = config)


# plot about the simulated data

simdata = assays(simreal)$counts
simtruedata = assays(simreal)$TrueCounts
for(i in 1:length(unique(rowData(simreal)$GeneGroup))){
  if(i==1)rowData(simreal)$GeneGroup[which(rowData(simreal)$GeneGroup==i-1)] = "None"
  else rowData(simreal)$GeneGroup[which(rowData(simreal)$GeneGroup==i-1)] = paste0("Group",i-1)
}
simdegenes = rownames(simdata)[which(rowData(simreal)$GeneGroup!="None")]
simdegeneinfo = data.frame(genes = simdegenes, 
                           newcelltype = as.factor(rowData(simreal)$GeneGroup[which(rowData(simreal)$GeneGroup!="None")]))

heatdata(list(simreal = simdata), simdegenes, 
         rowv = sort(as.character(simdegeneinfo$newcelltype), index.return = TRUE)$ix, 
         colv = sort(as.character(colData(sim)$Group), index.return = TRUE)$ix,
         cellinfo = data.frame(çells = colnames(simdata), 
                                newcelltype = as.factor(colData(sim)$Group)), 
         geneinfo = simdegeneinfo, 
         maxdata = 12,
         dirname = plotdir)
heatgcn(list(simreal = gcn(simdata, CPM = TRUE, name = "pearson", genes = simdegenes)), 
        geneinfo = simdegeneinfo, ord = sort(as.character(simdegeneinfo$newcelltype), index.return = TRUE)$ix, dirname = plotdir)

# plot sim geo

simdata = assays(simgeo)$counts
simtruedata = assays(simgeo)$TrueCounts
for(i in 1:length(unique(rowData(simgeo)$GeneGroup))){
  if(i==1)rowData(simgeo)$GeneGroup[which(rowData(simgeo)$GeneGroup==i-1)] = "None"
  else rowData(simgeo)$GeneGroup[which(rowData(simgeo)$GeneGroup==i-1)] = paste0("Group",i-1)
}
simdegenes = rownames(simdata)[which(rowData(simgeo)$GeneGroup!="None")]
simdegeneinfo = data.frame(genes = simdegenes, 
                           newcelltype = as.factor(rowData(simgeo)$GeneGroup[which(rowData(simgeo)$GeneGroup!="None")]))

heatdata(list(simgeoreal = simdata), simdegenes, 
         rowv = sort(as.character(simdegeneinfo$newcelltype), index.return = TRUE)$ix, 
         colv = sort(as.character(colData(simgeo)$Group), index.return = TRUE)$ix,
         cellinfo = data.frame(çells = colnames(simdata), 
                                newcelltype = as.factor(colData(simgeo)$Group)), 
         geneinfo = simdegeneinfo, 
         maxdata = 12,
         dirname = plotdir)
heatgcn(list(simgeoreal = gcn(simdata, CPM = TRUE, name = "pearson", genes = simdegenes)), 
        geneinfo = simdegeneinfo, ord = sort(as.character(simdegeneinfo$newcelltype), index.return = TRUE)$ix, dirname = plotdir)





# plot about the raw real data
load("/Users/jinjin/Desktop/result/markers.rdata")
degenes = rownames(zeisel_subnorm)[which(markers$auroc > 0.7)]
degeneinfo = data.frame(genes = degenes, newcelltype= as.factor(markers$clusts[match(degenes, markers$genes)]))
levels(degeneinfo$newcelltype) =levels(subcellinfo$newcelltype)

heatdata(list(real = zeisel_subnorm), genes = degenes, 
         rowv = sort(as.character(degeneinfo$newcelltype), index.return = TRUE)$ix, 
         colv = sort(as.character(subcellinfo$newcelltype), index.return = TRUE)$ix, 
         cellinfo = subcellinfo, geneinfo = degeneinfo, maxdata = 12, dirname = plotdir)
heatgcn(list(real = gcn(zeisel_subnorm, CPM = TRUE, genes = degenes)),  geneinfo = degeneinfo, 
        ord = sort(as.character(degeneinfo$newcelltype), index.return = TRUE)$ix, dirname = plotdir)


# compare
compare_simreal(zeisel_subnorm, simreal, simhomo, simgeo, plotdir,
                realcellinfo = subcellinfo, realdegeneinfo = degeneinfo)


# rholist = metadata(sim)$Params@corr
# 
# heatgcn(list(simrealrho1 = rholist[[2]], 
#              simrealgroup1 = gcn(simtruedata[,which(colData(sim)$Group=="Group1")], 
#                                  CPM = TRUE, CPM2 = TRUE,  name = "pearson", 
#                                  genes = rownames(rholist[[2]]))), 
#         dirname = plotdir)
# heatgcn(list(simrealrho2 = rholist[[3]], 
#              simrealgroup2 = gcn(simtruedata[,which(colData(sim)$Group=="Group2")], 
#                                  CPM = TRUE, CPM2 = TRUE, name = "pearson", 
#                                  genes = rownames(rholist[[3]]))), 
#         dirname = plotdir)
# heatgcn(list(simrealrho3 = rholist[[4]], 
#              simrealgroup3 = gcn(simtruedata[,which(colData(sim)$Group=="Group3")], 
#                                  CPM = TRUE, CPM2 = TRUE, name = "pearson", 
#                                  genes = rownames(rholist[[4]]))), 
#         dirname = plotdir)

# heatgcn(list(realgroup1 = gcn(zeisel_sub[,which(subcellinfo$newcelltype==levels(subcellinfo$newcelltype)[1])], CPM = TRUE, CPM2 = TRUE, name = "pearson", 
#                               genes = degenes[which(degeneinfo$newcelltype==levels(degeneinfo$newcelltype)[1])])), 
#         dirname = plotdir)
# heatgcn(list(realgroup2 = gcn(zeisel_sub[,which(subcellinfo$newcelltype==levels(subcellinfo$newcelltype)[2])], CPM = TRUE, CPM2 = TRUE, name = "pearson",
#                               genes = degenes[which(degeneinfo$newcelltype==levels(degeneinfo$newcelltype)[2])])), 
#         dirname = plotdir)
# heatgcn(list(realgroup3 = gcn(zeisel_sub[,which(subcellinfo$newcelltype==levels(subcellinfo$newcelltype)[3])], CPM = TRUE, CPM2 = TRUE, name = "pearson", 
#                               genes = degenes[which(degeneinfo$newcelltype==levels(degeneinfo$newcelltype)[3])])), 
#         dirname = plotdir)





# compare the real and simreal






#===============================================#
#   simulating tree-structured cell groups      # 
#===============================================#

# simulating tree-structured cell groups with no gene-gene correlation
simpletree <- function(plot=F){
  
  yaml="
name: brain cell
Glia cell:
    Astrocytes:
        params: NULL
    Oligodendrocytes:
        params: NULL
    Microglia:
        params: NULL
Neurons:
    Neuron1:
        params: NULL
    Neuron2:
        params: NULL
"
  os.list = yaml::yaml.load(yaml)
  tree = data.tree::as.Node(os.list)
  
  if(plot) {
    message('Plot the tree structure ..')
    p = plot(tree)
  } else {
    p = NULL
  }
  
  tree.phylo = data.tree::as.phylo.Node(tree)
  
  return(list(phylo.tree = tree.phylo, fig = p))
}
tree = simpletree()$phylo.tree

sim<-splatSimulateTrees(nGenes = 2000, batchCells = 1000, tree = list(tree),
                         group.prob = c(0.2, 0.1, 0.1, 0.3, 0.3), 
                         deall.prob = 0.9, house.prob = 0.05,
                         de.center = c(0.3), 
                         de.facScale = c(0.8, 0.8, 0.8, 0.8, 0.8),
                         de.prob = c(0.05, 0.05, 0.05, 0.05, 0.05),
                         de.facLoc = c(2, 3, 1, 2, 1),
                         dropout.mid = 2, alpha_mean = 0.4, withcorr = TRUE,  trials = 1)




# simulating tree-structured cell groups with randomized gene-gene correlation
sim<-splatSimulateTrees(nGenes = 500, batchCells = 100, tree = list(tree),
                        group.prob = c(0.1, 0.1, 0.1, 0.4, 0.3), deall.prob = 0.2, 
                        de.prob = c(0.5, 0.5, 0.5, 0.5, 0.5),
                        dropout.mid = 2, alpha_mean = 0.4, withcorr = TRUE, trials = 1)

plotdir = "/Users/jinjin/Desktop/result/"
truedata = assays(sim)$TrueCounts
cellinfo  = data.frame(cell = colnames(truedata), newcelltype = as.factor(colData(sim)$Group))
genegroup = rep(0, nrow(truedata))
rholist = metadata(sim)$Params@corr
genegroup[match(rownames(rholist[[1]]), rownames(truedata))] = 1
for(i in 2:length(rholist)){
  genegroup[match(rownames(rholist[[i]]), rownames(truedata))] <- i
}
genegroup = as.factor(genegroup)
levels(genegroup) = c("None", names(rholist))
geneinfo = data.frame(gene = rownames(truedata), newcelltype = genegroup)
levels(cellinfo$newcelltype) = tree$tip.label
levels(geneinfo$newcelltype)[3:length(levels(geneinfo$newcelltype))] = tree$tip.label
names(rholist)[2:length(rholist)] =   tree$tip.label
markgenes = rownames(truedata)[which(geneinfo$newcelltype%ni% c("None", "housekeep"))]
markgeneinfo = geneinfo[match(markgenes, geneinfo$gene),]
gene.names <- rowData(sim)$Gene
groups <- colData(sim)$Group
group.names <- sort(unique(groups))
group.facs.gene <- rowData(sim)[, paste0("DEFac", group.names)]
DEgene.name = as.character(gene.names[which(group.facs.gene[,1]>1)])
heatdata(datalist = list(true = truedata), rowv = TRUE, colv = TRUE, dir = plotdir, genes= DEgene.name, 
         cellinfo = cellinfo, geneinfo = geneinfo[match(DEgene.name, geneinfo$gene),])

umapplot(t(t(truedata)/colSums(truedata)), cellinfo$newcelltype, levels(cellinfo$newcelltype))




#===============================================#
#      simulating realdropped cell groups       # 
#===============================================#
data(zeisel)
sim<-RealDropSimulate(realdata = zeisel, nGenes = 200, nCells = 50,
                      dropout.mid = c(1,2), down.mean = c(10, 20), 
                      trials = 1,
                      dirname = "")

cellname = "pyramidal CA1" 
zeisel_single = zeisel[,which(cellinfo$newcelltype==cellname)]
zeisel_single = zeisel_single[which(rowSums(zeisel_single)>quantile(rowSums(zeisel_single), 0.5)),]

sim<-RealDropSimulate(zeisel_single, dropout.mid = c(1,2), down.mean = c(10, 20), 
                      trials = 1,
                      dirname = "")



































